// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	C++ class header boilerplate exported from UnrealHeaderTool.
	This is automatically generated by the tools.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

PRAGMA_DISABLE_DEPRECATION_WARNINGS
class ULeapFrame;
struct FVector;
class ULeapToolList;
class ULeapTool;
class ULeapPointableList;
class ULeapPointable;
class ULeapInteractionBox;
class ULeapImageList;
class ULeapHandList;
class ULeapHand;
class ULeapGestureList;
class ULeapGesture;
class ULeapFingerList;
class ULeapFinger;
#ifdef LEAPMOTION_LeapFrame_generated_h
#error "LeapFrame.generated.h already included, missing '#pragma once' in LeapFrame.h"
#endif
#define LEAPMOTION_LeapFrame_generated_h

#define Engine_Plugins_Runtime_LeapMotion_Source_LeapMotion_Public_LeapFrame_h_20_RPC_WRAPPERS \
 \
	DECLARE_FUNCTION(execTranslationProbability) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_Frame); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(float*)Z_Param__Result=this->TranslationProbability(Z_Param_Frame); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execTranslation) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_Frame); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(FVector*)Z_Param__Result=this->Translation(Z_Param_Frame); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execTools) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(ULeapToolList**)Z_Param__Result=this->Tools(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execTool) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_Id); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(ULeapTool**)Z_Param__Result=this->Tool(Z_Param_Id); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execScaleProbability) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_Frame); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(float*)Z_Param__Result=this->ScaleProbability(Z_Param_Frame); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execScaleFactor) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_Frame); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(float*)Z_Param__Result=this->ScaleFactor(Z_Param_Frame); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execRotationProbability) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_Frame); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(float*)Z_Param__Result=this->RotationProbability(Z_Param_Frame); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execRotationAxis) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_Frame); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(FVector*)Z_Param__Result=this->RotationAxis(Z_Param_Frame); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execRotationAngleAroundAxis) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_Frame); \
		P_GET_STRUCT(FVector,Z_Param_Axis); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(float*)Z_Param__Result=this->RotationAngleAroundAxis(Z_Param_Frame,Z_Param_Axis); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execRotationAngle) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_Frame); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(float*)Z_Param__Result=this->RotationAngle(Z_Param_Frame); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execPointables) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(ULeapPointableList**)Z_Param__Result=this->Pointables(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execPointable) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_Id); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(ULeapPointable**)Z_Param__Result=this->Pointable(Z_Param_Id); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execInteractionBox) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(ULeapInteractionBox**)Z_Param__Result=this->InteractionBox(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execImages) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(ULeapImageList**)Z_Param__Result=this->Images(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execHands) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(ULeapHandList**)Z_Param__Result=this->Hands(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execHand) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_Id); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(ULeapHand**)Z_Param__Result=this->Hand(Z_Param_Id); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execGesturesSinceFrame) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_frame); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(ULeapGestureList**)Z_Param__Result=this->GesturesSinceFrame(Z_Param_frame); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execGestures) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(ULeapGestureList**)Z_Param__Result=this->Gestures(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execGesture) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_Id); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(ULeapGesture**)Z_Param__Result=this->Gesture(Z_Param_Id); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execFingers) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(ULeapFingerList**)Z_Param__Result=this->Fingers(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execFinger) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_Id); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(ULeapFinger**)Z_Param__Result=this->Finger(Z_Param_Id); \
		P_NATIVE_END; \
	}


#define Engine_Plugins_Runtime_LeapMotion_Source_LeapMotion_Public_LeapFrame_h_20_RPC_WRAPPERS_NO_PURE_DECLS \
 \
	DECLARE_FUNCTION(execTranslationProbability) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_Frame); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(float*)Z_Param__Result=this->TranslationProbability(Z_Param_Frame); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execTranslation) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_Frame); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(FVector*)Z_Param__Result=this->Translation(Z_Param_Frame); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execTools) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(ULeapToolList**)Z_Param__Result=this->Tools(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execTool) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_Id); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(ULeapTool**)Z_Param__Result=this->Tool(Z_Param_Id); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execScaleProbability) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_Frame); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(float*)Z_Param__Result=this->ScaleProbability(Z_Param_Frame); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execScaleFactor) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_Frame); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(float*)Z_Param__Result=this->ScaleFactor(Z_Param_Frame); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execRotationProbability) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_Frame); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(float*)Z_Param__Result=this->RotationProbability(Z_Param_Frame); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execRotationAxis) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_Frame); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(FVector*)Z_Param__Result=this->RotationAxis(Z_Param_Frame); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execRotationAngleAroundAxis) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_Frame); \
		P_GET_STRUCT(FVector,Z_Param_Axis); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(float*)Z_Param__Result=this->RotationAngleAroundAxis(Z_Param_Frame,Z_Param_Axis); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execRotationAngle) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_Frame); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(float*)Z_Param__Result=this->RotationAngle(Z_Param_Frame); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execPointables) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(ULeapPointableList**)Z_Param__Result=this->Pointables(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execPointable) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_Id); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(ULeapPointable**)Z_Param__Result=this->Pointable(Z_Param_Id); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execInteractionBox) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(ULeapInteractionBox**)Z_Param__Result=this->InteractionBox(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execImages) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(ULeapImageList**)Z_Param__Result=this->Images(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execHands) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(ULeapHandList**)Z_Param__Result=this->Hands(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execHand) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_Id); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(ULeapHand**)Z_Param__Result=this->Hand(Z_Param_Id); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execGesturesSinceFrame) \
	{ \
		P_GET_OBJECT(ULeapFrame,Z_Param_frame); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(ULeapGestureList**)Z_Param__Result=this->GesturesSinceFrame(Z_Param_frame); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execGestures) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(ULeapGestureList**)Z_Param__Result=this->Gestures(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execGesture) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_Id); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(ULeapGesture**)Z_Param__Result=this->Gesture(Z_Param_Id); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execFingers) \
	{ \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(ULeapFingerList**)Z_Param__Result=this->Fingers(); \
		P_NATIVE_END; \
	} \
 \
	DECLARE_FUNCTION(execFinger) \
	{ \
		P_GET_PROPERTY(UIntProperty,Z_Param_Id); \
		P_FINISH; \
		P_NATIVE_BEGIN; \
		*(ULeapFinger**)Z_Param__Result=this->Finger(Z_Param_Id); \
		P_NATIVE_END; \
	}


#define Engine_Plugins_Runtime_LeapMotion_Source_LeapMotion_Public_LeapFrame_h_20_INCLASS_NO_PURE_DECLS \
	private: \
	static void StaticRegisterNativesULeapFrame(); \
	friend LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapFrame(); \
	public: \
	DECLARE_CLASS(ULeapFrame, UObject, COMPILED_IN_FLAGS(0), 0, TEXT("/Script/LeapMotion"), NO_API) \
	DECLARE_SERIALIZER(ULeapFrame) \
	/** Indicates whether the class is compiled into the engine */ \
	enum {IsIntrinsic=COMPILED_IN_INTRINSIC};


#define Engine_Plugins_Runtime_LeapMotion_Source_LeapMotion_Public_LeapFrame_h_20_INCLASS \
	private: \
	static void StaticRegisterNativesULeapFrame(); \
	friend LEAPMOTION_API class UClass* Z_Construct_UClass_ULeapFrame(); \
	public: \
	DECLARE_CLASS(ULeapFrame, UObject, COMPILED_IN_FLAGS(0), 0, TEXT("/Script/LeapMotion"), NO_API) \
	DECLARE_SERIALIZER(ULeapFrame) \
	/** Indicates whether the class is compiled into the engine */ \
	enum {IsIntrinsic=COMPILED_IN_INTRINSIC};


#define Engine_Plugins_Runtime_LeapMotion_Source_LeapMotion_Public_LeapFrame_h_20_STANDARD_CONSTRUCTORS \
	/** Standard constructor, called after all reflected properties have been initialized */ \
	NO_API ULeapFrame(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get()); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(ULeapFrame) \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, ULeapFrame); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(ULeapFrame); \
private: \
	/** Private move- and copy-constructors, should never be used */ \
	NO_API ULeapFrame(ULeapFrame&&); \
	NO_API ULeapFrame(const ULeapFrame&); \
public:


#define Engine_Plugins_Runtime_LeapMotion_Source_LeapMotion_Public_LeapFrame_h_20_ENHANCED_CONSTRUCTORS \
	/** Standard constructor, called after all reflected properties have been initialized */ \
	NO_API ULeapFrame(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get()) : Super(ObjectInitializer) { }; \
private: \
	/** Private move- and copy-constructors, should never be used */ \
	NO_API ULeapFrame(ULeapFrame&&); \
	NO_API ULeapFrame(const ULeapFrame&); \
public: \
	DECLARE_VTABLE_PTR_HELPER_CTOR(NO_API, ULeapFrame); \
DEFINE_VTABLE_PTR_HELPER_CTOR_CALLER(ULeapFrame); \
	DEFINE_DEFAULT_OBJECT_INITIALIZER_CONSTRUCTOR_CALL(ULeapFrame)


#define Engine_Plugins_Runtime_LeapMotion_Source_LeapMotion_Public_LeapFrame_h_20_PRIVATE_PROPERTY_OFFSET \
	FORCEINLINE static uint32 __PPO__PFinger() { return STRUCT_OFFSET(ULeapFrame, PFinger); } \
	FORCEINLINE static uint32 __PPO__PFingers() { return STRUCT_OFFSET(ULeapFrame, PFingers); } \
	FORCEINLINE static uint32 __PPO__PGesture() { return STRUCT_OFFSET(ULeapFrame, PGesture); } \
	FORCEINLINE static uint32 __PPO__PGestures() { return STRUCT_OFFSET(ULeapFrame, PGestures); } \
	FORCEINLINE static uint32 __PPO__PHand() { return STRUCT_OFFSET(ULeapFrame, PHand); } \
	FORCEINLINE static uint32 __PPO__PHands() { return STRUCT_OFFSET(ULeapFrame, PHands); } \
	FORCEINLINE static uint32 __PPO__PImages() { return STRUCT_OFFSET(ULeapFrame, PImages); } \
	FORCEINLINE static uint32 __PPO__PInteractionBox() { return STRUCT_OFFSET(ULeapFrame, PInteractionBox); } \
	FORCEINLINE static uint32 __PPO__PPointable() { return STRUCT_OFFSET(ULeapFrame, PPointable); } \
	FORCEINLINE static uint32 __PPO__PPointables() { return STRUCT_OFFSET(ULeapFrame, PPointables); } \
	FORCEINLINE static uint32 __PPO__PTool() { return STRUCT_OFFSET(ULeapFrame, PTool); } \
	FORCEINLINE static uint32 __PPO__PTools() { return STRUCT_OFFSET(ULeapFrame, PTools); }


#define Engine_Plugins_Runtime_LeapMotion_Source_LeapMotion_Public_LeapFrame_h_17_PROLOG
#define Engine_Plugins_Runtime_LeapMotion_Source_LeapMotion_Public_LeapFrame_h_20_GENERATED_BODY_LEGACY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	Engine_Plugins_Runtime_LeapMotion_Source_LeapMotion_Public_LeapFrame_h_20_PRIVATE_PROPERTY_OFFSET \
	Engine_Plugins_Runtime_LeapMotion_Source_LeapMotion_Public_LeapFrame_h_20_RPC_WRAPPERS \
	Engine_Plugins_Runtime_LeapMotion_Source_LeapMotion_Public_LeapFrame_h_20_INCLASS \
	Engine_Plugins_Runtime_LeapMotion_Source_LeapMotion_Public_LeapFrame_h_20_STANDARD_CONSTRUCTORS \
public: \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#define Engine_Plugins_Runtime_LeapMotion_Source_LeapMotion_Public_LeapFrame_h_20_GENERATED_BODY \
PRAGMA_DISABLE_DEPRECATION_WARNINGS \
public: \
	Engine_Plugins_Runtime_LeapMotion_Source_LeapMotion_Public_LeapFrame_h_20_PRIVATE_PROPERTY_OFFSET \
	Engine_Plugins_Runtime_LeapMotion_Source_LeapMotion_Public_LeapFrame_h_20_RPC_WRAPPERS_NO_PURE_DECLS \
	Engine_Plugins_Runtime_LeapMotion_Source_LeapMotion_Public_LeapFrame_h_20_INCLASS_NO_PURE_DECLS \
	Engine_Plugins_Runtime_LeapMotion_Source_LeapMotion_Public_LeapFrame_h_20_ENHANCED_CONSTRUCTORS \
static_assert(false, "Unknown access specifier for GENERATED_BODY() macro in class LeapFrame."); \
PRAGMA_ENABLE_DEPRECATION_WARNINGS


#undef CURRENT_FILE_ID
#define CURRENT_FILE_ID Engine_Plugins_Runtime_LeapMotion_Source_LeapMotion_Public_LeapFrame_h


PRAGMA_ENABLE_DEPRECATION_WARNINGS
